#include<iostream>
#include<sstream>
#include<string>
using namespace std;

void insert(string line);
void modify(string line);
void print(string line);
void printNode(string line);
void deleteFunction(string line);
int numberOfWords(string line);

int main() {
	string line, command;
	cout << ">";
	getline(cin, line);
	while (!cin.eof()) {
		stringstream ss(line);
		ss >> command;
		if (command == "insertR")
			insert(line);
		else if (command == "modifyR")
			modify(line);
		else if (command == "printR")
			print(line);
		else if (command == "printNode")
			printNode(line);
		else if (command == "deleteR")
			deleteFunction(line);
		else
			cout << "Error: invalid command" << endl;
		cout << ">";
		getline(cin, line);
	}
	return 0;
}


void insert(string line) {
	string command, name;
	double resistance;
	int nodeid1, nodeid2;
	if ((numberOfWords(line) == 1) || numberOfWords(line) == 2)
		cout << "Error: too few arguements" << endl;
	if (numberOfWords(line) == 3) {
		stringstream ss(line);
		ss >> command >> name >> resistance;
		if (!ss.fail()) {
			if (resistance < 0)
				cout << "Error: negative resistance" << endl;
			else
				cout << "Error: too few arguements" << endl;
		}
		else {
			cout << "Error: invalid arguement" << endl;
			ss.clear();
		}
	}
	if (numberOfWords(line) == 4) {
		stringstream ss(line);
		ss >> command >> name >> resistance;
		if (!ss.fail()) {
			ss.clear();
			ss >> nodeid1;
			if (!ss.fail()) {
				if (!(0 <= nodeid1 <= 5000))
					cout << "Error: node " << nodeid1 << " is out of permitted range 0-5000" << endl;
				else
					cout << "Error: too few arguements" << endl;
			}
			else 
				cout << "Error: invalid arguement" << endl;
		}
	}
	if (numberOfWords(line) == 5) {
		stringstream ss(line);
		ss >> command >> name >> resistance;
		if (!ss.fail()) {

		}
	}
}
void modify(string line) {

}
void print(string line) {

}
void printNode(string line) {

}
void deleteFunction(string line) {

}

int numberOfWords(string line) {
	stringstream ss(line);
	string whatever;
	int number=0;
	while (!ss.eof()) {
		ss >> whatever;
		number++;
	}
	return number;
}

